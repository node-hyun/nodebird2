{"ast":null,"code":"// import { all } from 'redux-saga/effects';\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    console.log(\"saga action.data : \", action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data.text // 입력폼에 입력한 데이터가 여기까지 넘어옴\n\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  console.log(\"action.data from saga : \", action.data);\n\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    console.log(\"saga comment action.data : \", action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.log(\"댓글 에러 : \", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction followAPI() {\n  return axios.post('/api/follow');\n}\n\nfunction* follow(action) {\n  try {\n    // const result = yield call(followAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI() {\n  return axios.post('/api/unfollow');\n}\n\nfunction* unfollow(action) {\n  try {\n    // const result = yield call(unfollowAPI);\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["D:/nodebird2/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","addPostAPI","data","axios","post","addPost","action","id","generate","console","log","type","content","text","err","error","response","addCommentAPI","postId","addComment","removePostAPI","delete","removePost","followAPI","follow","unfollowAPI","unfollow","watchUnfollow","watchFollow","watchRemovePost","watchAddPost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["// import { all } from 'redux-saga/effects';\r\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n\r\n    FOLLOW_FAILURE,\r\n    FOLLOW_REQUEST,\r\n    FOLLOW_SUCCESS,\r\n\r\n    UNFOLLOW_FAILURE,\r\n    UNFOLLOW_REQUEST,\r\n    UNFOLLOW_SUCCESS,\r\n\r\n} from '../reducers/post';\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nimport shortId from 'shortid';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        console.log(\"saga action.data : \", action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data.text, // 입력폼에 입력한 데이터가 여기까지 넘어옴\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\nfunction* addComment(action) {\r\n    console.log(\"action.data from saga : \", action.data);\r\n    try {\r\n        // const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"saga comment action.data : \", action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(removePostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction followAPI() {\r\n    return axios.post('/api/follow');\r\n}\r\nfunction* follow(action) {\r\n    try {\r\n        // const result = yield call(followAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unfollowAPI() {\r\n    return axios.post('/api/unfollow');\r\n}\r\nfunction* unfollow(action) {\r\n    try {\r\n        // const result = yield call(unfollowAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}