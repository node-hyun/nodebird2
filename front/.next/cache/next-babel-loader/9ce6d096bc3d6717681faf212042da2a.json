{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\n// import { all } from 'redux-saga/effects';\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate();\n          console.log(\"saga action.data : \", action.data);\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data.text // 입력폼에 입력한 데이터가 여기까지 넘어옴\n\n            }\n          });\n\n        case 7:\n          _context.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 9:\n          _context.next = 16;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 16;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"action.data from saga : \", action.data);\n          _context2.prev = 1;\n          // const result = yield call(addCommentAPI, action.data);\n          console.log(\"saga comment action.data : \", action.data);\n          _context2.next = 5;\n          return delay(1000);\n\n        case 5:\n          _context2.next = 7;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 7:\n          _context2.next = 14;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log(\"댓글 에러 : \", _context2.t0);\n          _context2.next = 14;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 9]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"]('/api/post', data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["D:/nodebird2/front/sagas/post.js"],"names":["addPost","addComment","removePost","watchRemovePost","watchAddPost","watchAddComment","postSaga","all","delay","fork","put","takeLatest","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","addPostAPI","data","axios","post","action","id","generate","console","log","type","content","text","error","response","addCommentAPI","postId","removePostAPI"],"mappings":"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","sourcesContent":["// import { all } from 'redux-saga/effects';\r\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n\r\n    FOLLOW_FAILURE,\r\n    FOLLOW_REQUEST,\r\n    FOLLOW_SUCCESS,\r\n    UNFOLLOW_FAILURE,\r\n    UNFOLLOW_REQUEST,\r\n    UNFOLLOW_SUCCESS,\r\n\r\n} from '../reducers/post';\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nimport shortId from 'shortid';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        console.log(\"saga action.data : \", action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data.text, // 입력폼에 입력한 데이터가 여기까지 넘어옴\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\nfunction* addComment(action) {\r\n    console.log(\"action.data from saga : \", action.data);\r\n    try {\r\n        // const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"saga comment action.data : \", action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(removePostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}