{"ast":null,"code":"// import { all } from 'redux-saga/effects';\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    console.log(\"saga action.data : \", action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data.text // 입력폼에 입력한 데이터가 여기까지 넘어옴\n\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}","map":{"version":3,"sources":["d:/nodebird2/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","shortId","addPostAPI","data","axios","post","addPost","action","id","generate","console","log","type","content","text","ADD_POST_TO_ME","err","error","response","watchAddPost","postSaga"],"mappings":"AAAA;AACA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,SACIC,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,EAIIC,mBAJJ,EAKIC,mBALJ,EAMIC,mBANJ,QAOO,kBAPP;AAQA,OAAOC,OAAP,MAAoB,SAApB;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOC,KAAK,CAACC,IAAN,CAAW,WAAX,EAAwBF,IAAxB,CAAP;AACH;;AACD,UAAUG,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMiB,EAAE,GAAGP,OAAO,CAACQ,QAAR,EAAX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCJ,MAAM,CAACJ,IAA1C;AACA,UAAMV,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEf,gBADA;AAENM,MAAAA,IAAI,EAAE;AACFK,QAAAA,EADE;AAEFK,QAAAA,OAAO,EAAEN,MAAM,CAACJ,IAAP,CAAYW,IAFnB,CAEyB;;AAFzB;AAFA,KAAD,CAAT;AAOA,UAAMrB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEG,cADA;AAENZ,MAAAA,IAAI,EAAEK;AAFA,KAAD,CAAT;AAIH,GAhBD,CAgBE,OAAOQ,GAAP,EAAY;AACVN,IAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACA,UAAMvB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEjB,gBADA;AAENQ,MAAAA,IAAI,EAAEa,GAAG,CAACE,QAAJ,CAAaf;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUgB,YAAV,GAAyB;AACrB,QAAMzB,UAAU,CAACE,gBAAD,EAAmBU,OAAnB,CAAhB;AACH;;AAED,eAAe,UAAUc,QAAV,GAAqB;AAChC,QAAM9B,GAAG,CAAC,CACNE,IAAI,CAAC2B,YAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["// import { all } from 'redux-saga/effects';\r\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n} from '../reducers/post';\r\nimport shortId from 'shortid';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        console.log(\"saga action.data : \", action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data.text, // 입력폼에 입력한 데이터가 여기까지 넘어옴\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}