{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\n// import { all } from 'redux-saga/effects';\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../reducers/post';\nshortId;\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate();\n          console.log(\"saga action.data : \", action.data);\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data.text // 입력폼에 입력한 데이터가 여기까지 넘어옴\n\n            }\n          });\n\n        case 7:\n          _context.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 9:\n          _context.next = 16;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 16;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["d:/nodebird2/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","all","delay","fork","put","takeLatest","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","shortId","addPostAPI","data","axios","post","action","id","generate","console","log","type","content","text","ADD_POST_TO_ME","error","response"],"mappings":";;oDAYUA,O;qDAyBAC,Y;qDAIeC,Q;;AAzCzB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,SACIC,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,QAIO,kBAJP;AAKAC,OAAO;;AAEP,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOC,KAAK,CAACC,IAAN,CAAW,WAAX,EAAwBF,IAAxB,CAAP;AACH;;AACD,SAAUb,OAAV,CAAkBgB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMZ,KAAK,CAAC,IAAD,CAAX;;AAHR;AAIca,UAAAA,EAJd,GAImBN,OAAO,CAACO,QAAR,EAJnB;AAKQC,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCJ,MAAM,CAACH,IAA1C;AALR;AAMQ,iBAAMP,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAEX,gBADA;AAENG,YAAAA,IAAI,EAAE;AACFI,cAAAA,EAAE,EAAFA,EADE;AAEFK,cAAAA,OAAO,EAAEN,MAAM,CAACH,IAAP,CAAYU,IAFnB,CAEyB;;AAFzB;AAFA,WAAD,CAAT;;AANR;AAAA;AAaQ,iBAAMjB,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAEG,cADA;AAENX,YAAAA,IAAI,EAAEI;AAFA,WAAD,CAAT;;AAbR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBQE,UAAAA,OAAO,CAACM,KAAR;AAlBR;AAmBQ,iBAAMnB,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAEb,gBADA;AAENK,YAAAA,IAAI,EAAE,YAAIa,QAAJ,CAAab;AAFb,WAAD,CAAT;;AAnBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBA,SAAUZ,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACE,gBAAD,EAAmBT,OAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACJ,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// import { all } from 'redux-saga/effects';\r\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n} from '../reducers/post';\r\nshortId\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        console.log(\"saga action.data : \", action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data.text, // 입력폼에 입력한 데이터가 여기까지 넘어옴\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}