{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addFile),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddFile),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(fileSaga);\n\nimport { all, call, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from \"axios\";\nimport { ADD_FILE_REQUEST, ADD_FILE_SUCCESS, ADD_FILE_FAILURE } from '../reducers/file';\n\nfunction addFileAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction addFile(action) {\n  return _regeneratorRuntime.wrap(function addFile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log(\"addFile [saga] check\"); // const result = yield call(addFile, action.data);\n          // console.log(\"result.data(from server) : \", result.data);\n          // yield delay(1000);\n\n          _context.next = 4;\n          return put({\n            type: ADD_FILE_SUCCESS,\n            data: action.data\n          });\n\n        case 4:\n          _context.next = 11;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 11;\n          return put({\n            type: ADD_FILE_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 6]]);\n}\n\nfunction watchAddFile() {\n  return _regeneratorRuntime.wrap(function watchAddFile$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"watchAddFile 실행 check\");\n          _context2.next = 3;\n          return takeLatest(ADD_FILE_REQUEST, addFile);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function fileSaga() {\n  return _regeneratorRuntime.wrap(function fileSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddFile)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["D:/nodebird2/front/sagas/file.js"],"names":["addFile","watchAddFile","fileSaga","all","call","delay","fork","put","takeLatest","axios","ADD_FILE_REQUEST","ADD_FILE_SUCCESS","ADD_FILE_FAILURE","addFileAPI","data","post","action","console","log","type","error","response"],"mappings":";;oDAaUA,O;qDAsBAC,Y;qDAKeC,Q;;AAxCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACIC,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,QAIO,kBAJP;;AAMA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOL,KAAK,CAACM,IAAN,CAAW,aAAX,EAA0BD,IAA1B,CAAP;AACH;;AAED,SAAUd,OAAV,CAAkBgB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAFR,CAGQ;AACA;AACA;;AALR;AAOQ,iBAAMX,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAER,gBADA;AAENG,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,WAAD,CAAT;;AAPR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYQG,UAAAA,OAAO,CAACG,KAAR;AAZR;AAaQ,iBAAMb,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAEP,gBADA;AAENQ,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaP;AAFd,WAAD,CAAT;;AAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,SAAUb,YAAV;AAAA;AAAA;AAAA;AAAA;AACIgB,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AADJ;AAEI,iBAAMV,UAAU,CAACE,gBAAD,EAAmBV,OAAnB,CAAhB;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNG,IAAI,CAACL,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport axios from \"axios\";\r\n\r\nimport {\r\n    ADD_FILE_REQUEST,\r\n    ADD_FILE_SUCCESS,\r\n    ADD_FILE_FAILURE,\r\n} from '../reducers/file';\r\n\r\nfunction addFileAPI(data) {\r\n    return axios.post('/user/login', data);\r\n}\r\n\r\nfunction* addFile(action) {\r\n    try {\r\n        console.log(\"addFile [saga] check\");\r\n        // const result = yield call(addFile, action.data);\r\n        // console.log(\"result.data(from server) : \", result.data);\r\n        // yield delay(1000);\r\n\r\n        yield put({\r\n            type: ADD_FILE_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_FILE_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction* watchAddFile() {\r\n    console.log(\"watchAddFile 실행 check\");\r\n    yield takeLatest(ADD_FILE_REQUEST, addFile);\r\n}\r\n\r\nexport default function* fileSaga() {\r\n    yield all([\r\n        fork(watchAddFile),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}