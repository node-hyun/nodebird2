{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'terecal'\n    },\n    content: 'sample 게시글 #test',\n    Images: [{\n      src: 'https://image.shutterstock.com/image-vector/sample-red-square-grunge-stamp-260nw-338250266.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '첫번째 더미 댓글 fisrt '\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '두번째 더미 댓글 second'\n    }]\n  }],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n});\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport default ((state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        // return {\n        //     ...state,\n        //     addCommentLoading: true,\n        //     addCommentDone: false,\n        //     addCommentError: null,\n        // };\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        // 댓글이 달릴 포스팅 객체 찾기\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      default:\n        return state;\n    }\n  });\n}); // export default reducer;","map":{"version":3,"sources":["D:/nodebird2/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","dummyPost","data","dummyComment","generate","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","state","action","draft","type","unshift","error","post","find","v","postId","filter"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,OAApB;AAGA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CACP;AACIC,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAFV;AAMIC,IAAAA,OAAO,EAAE,kBANb;AAOIC,IAAAA,MAAM,EAAE,CAAC;AACLC,MAAAA,GAAG,EAAE;AADA,KAAD,EAEL;AACCA,MAAAA,GAAG,EAAE;AADN,KAFK,EAIL;AACCA,MAAAA,GAAG,EAAE;AADN,KAJK,CAPZ;AAcIC,IAAAA,QAAQ,EAAE,CAAC;AACPL,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADC;AAIPC,MAAAA,OAAO,EAAE;AAJF,KAAD,EAKP;AACCF,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADP;AAICC,MAAAA,OAAO,EAAE;AAJV,KALO;AAdd,GADO,CADa;AA6BxBI,EAAAA,cAAc,EAAE,KA7BQ;AA8BxBC,EAAAA,WAAW,EAAE,KA9BW;AA+BxBC,EAAAA,YAAY,EAAE,IA/BU;AAiCxBC,EAAAA,iBAAiB,EAAE,KAjCK;AAkCxBC,EAAAA,cAAc,EAAE,KAlCQ;AAmCxBC,EAAAA,eAAe,EAAE,IAnCO;AAqCxBC,EAAAA,iBAAiB,EAAE,KArCK;AAsCxBC,EAAAA,cAAc,EAAE,KAtCQ;AAuCxBC,EAAAA,eAAe,EAAE;AAvCO,CAArB;;AA4CP,MAAMC,SAAS,GAAIC,IAAD,KAAW;AACzBjB,EAAAA,EAAE,EAAEiB,IAAI,CAACjB,EADgB;AAEzBG,EAAAA,OAAO,EAAEc,IAAI,CAACd,OAFW;AAGzBF,EAAAA,IAAI,EAAE;AACFD,IAAAA,EAAE,EAAE,CADF;AAEFE,IAAAA,QAAQ,EAAE;AAFR,GAHmB;AAOzBE,EAAAA,MAAM,EAAE,EAPiB;AAQzBE,EAAAA,QAAQ,EAAE;AARe,CAAX,CAAlB;;AAWA,MAAMY,YAAY,GAAID,IAAD,KAAW;AAC5BjB,EAAAA,EAAE,EAAEJ,OAAO,CAACuB,QAAR,EADwB;AAE5BhB,EAAAA,OAAO,EAAEc,IAFmB;AAG5BhB,EAAAA,IAAI,EAAE;AACFD,IAAAA,EAAE,EAAE,CADF;AAEFE,IAAAA,QAAQ,EAAE;AAFR;AAHsB,CAAX,CAArB;;AASA,OAAO,MAAMkB,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAGP,gBAAe,CAACC,KAAK,GAAG/B,YAAT,EAAuBgC,MAAvB,KAAkC;AAC7C,SAAOjC,OAAO,CAACgC,KAAD,EAASE,KAAD,IAAW;AAC7B,YAAQD,MAAM,CAACE,IAAf;AACI,WAAKZ,gBAAL;AACIW,QAAAA,KAAK,CAACxB,cAAN,GAAuB,IAAvB;AACAwB,QAAAA,KAAK,CAACvB,WAAN,GAAoB,KAApB;AACAuB,QAAAA,KAAK,CAACtB,YAAN,GAAqB,IAArB;AACA;;AACJ,WAAKY,gBAAL;AACIU,QAAAA,KAAK,CAACxB,cAAN,GAAuB,KAAvB;AACAwB,QAAAA,KAAK,CAACvB,WAAN,GAAoB,IAApB;AACAuB,QAAAA,KAAK,CAAChC,SAAN,CAAgBkC,OAAhB,CAAwBjB,SAAS,CAACc,MAAM,CAACb,IAAR,CAAjC;AACA;;AACJ,WAAKK,gBAAL;AACIS,QAAAA,KAAK,CAACxB,cAAN,GAAuB,KAAvB;AACAwB,QAAAA,KAAK,CAACtB,YAAN,GAAqBqB,MAAM,CAACI,KAA5B;AACA;;AAEJ,WAAKX,mBAAL;AACI;AACA;AACA;AACA;AACA;AACA;AACAQ,QAAAA,KAAK,CAACrB,iBAAN,GAA0B,IAA1B;AACAqB,QAAAA,KAAK,CAACpB,cAAN,GAAuB,KAAvB;AACAoB,QAAAA,KAAK,CAACnB,eAAN,GAAwB,IAAxB;AACA;;AACJ,WAAKY,mBAAL;AACI;AACA,cAAMW,IAAI,GAAGJ,KAAK,CAAChC,SAAN,CAAgBqC,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACrC,EAAF,KAAS8B,MAAM,CAACb,IAAP,CAAYqB,MAAjD,CAAb;AACAH,QAAAA,IAAI,CAAC7B,QAAL,CAAc2B,OAAd,CAAsBf,YAAY,CAACY,MAAM,CAACb,IAAP,CAAYd,OAAb,CAAlC;AACA4B,QAAAA,KAAK,CAACrB,iBAAN,GAA0B,KAA1B;AACAqB,QAAAA,KAAK,CAACpB,cAAN,GAAuB,IAAvB;AACA;;AACJ,WAAKc,mBAAL;AAEIM,QAAAA,KAAK,CAACrB,iBAAN,GAA0B,KAA1B;AACAqB,QAAAA,KAAK,CAACnB,eAAN,GAAwBkB,MAAM,CAACI,KAA/B;AACA;;AAEJ,WAAKR,mBAAL;AACIK,QAAAA,KAAK,CAAClB,iBAAN,GAA0B,IAA1B;AACAkB,QAAAA,KAAK,CAACjB,cAAN,GAAuB,KAAvB;AACAiB,QAAAA,KAAK,CAAChB,eAAN,GAAwB,IAAxB;AACA;;AACJ,WAAKY,mBAAL;AACII,QAAAA,KAAK,CAAClB,iBAAN,GAA0B,KAA1B;AACAkB,QAAAA,KAAK,CAACjB,cAAN,GAAuB,IAAvB;AACAiB,QAAAA,KAAK,CAAChC,SAAN,GAAkBgC,KAAK,CAAChC,SAAN,CAAgBwC,MAAhB,CAAwBF,CAAD,IAAOA,CAAC,CAACrC,EAAF,KAAS8B,MAAM,CAACb,IAA9C,CAAlB;AACA;;AACJ,WAAKW,mBAAL;AACIG,QAAAA,KAAK,CAAClB,iBAAN,GAA0B,KAA1B;AACAkB,QAAAA,KAAK,CAAChB,eAAN,GAAwBe,MAAM,CAACI,KAA/B;AACA;;AAEJ;AACI,eAAOL,KAAP;AAxDR;AA0DH,GA3Da,CAAd;AA4DH,CA7DD,E,CA+DA","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\n\r\n\r\nexport const initialState = {\r\n    mainPosts: [\r\n        {\r\n            id: 1,\r\n            User: {\r\n                id: 1,\r\n                nickname: 'terecal',\r\n            },\r\n            content: 'sample 게시글 #test',\r\n            Images: [{\r\n                src: 'https://image.shutterstock.com/image-vector/sample-red-square-grunge-stamp-260nw-338250266.jpg',\r\n            }, {\r\n                src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n            }, {\r\n                src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n            }],\r\n            Comments: [{\r\n                User: {\r\n                    nickname: 'nero',\r\n                },\r\n                content: '첫번째 더미 댓글 fisrt ',\r\n            }, {\r\n                User: {\r\n                    nickname: 'hero',\r\n                },\r\n                content: '두번째 더미 댓글 second',\r\n            }]\r\n        },\r\n    ],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n};\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n    },\r\n});\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n\r\n            case ADD_COMMENT_REQUEST:\r\n                // return {\r\n                //     ...state,\r\n                //     addCommentLoading: true,\r\n                //     addCommentDone: false,\r\n                //     addCommentError: null,\r\n                // };\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:\r\n                // 댓글이 달릴 포스팅 객체 찾기\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n            case ADD_COMMENT_FAILURE:\r\n\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n\r\n            default:\r\n                return state;\r\n        }\r\n    })\r\n}\r\n\r\n// export default reducer;\r\n"]},"metadata":{},"sourceType":"module"}